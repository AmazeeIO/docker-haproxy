global
	daemon
	maxconn 1024
	pidfile /var/run/haproxy.pid

defaults
	balance roundrobin
	timeout client 60s
	timeout connect 60s
	timeout server 60s

frontend http
	mode tcp
	bind :80
{{range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" ","}}
	use_backend http_{{$host}} if { hdr(host) -i {{$host}} }
{{end}}

frontend https
	mode tcp
	bind *:443
	option socket-stats
	tcp-request inspect-delay 5s
	tcp-request content accept if { req_ssl_hello_type 1 }
{{range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" ","}}
	use_backend https_{{$host}} if { req_ssl_sni -i {{$host}} }
{{end}}

{{range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" ","}}
backend http_{{$host}}
	{{range $index, $value := $containers}}
		{{$addrLen := len $value.Addresses}}
		{{if eq $addrLen 1}}
			{{with $address := index $value.Addresses 0}}
				{{if eq $address.Port "80"}}
	server {{$address.IP}}:{{$address.Port}} {{$address.IP}}:{{$address.Port}} check
				{{end}}
			{{end}}
		{{else}}
			{{range $i, $address := $value.Addresses}}
				{{if eq $address.Port "80"}}
	server {{$address.IP}}:{{$address.Port}} {{$address.IP}}:{{$address.Port}} check
				{{end}}
			{{end}}
		{{end}}
	{{end}}

backend https_{{$host}}
	#balance leastconn
	mode tcp

	# maximum SSL session ID length is 32 bytes.
	stick-table type binary len 32 size 30k expire 30m

	acl clienthello req_ssl_hello_type 1
	acl serverhello rep_ssl_hello_type 2

	# use tcp content accepts to detects ssl client and server hello.
	tcp-request inspect-delay 5s
	tcp-request content accept if clienthello

	# no timeout on response inspect delay by default.
	tcp-response content accept if serverhello

	stick on payload_lv(43,1) if clienthello

	# Learn on response if server hello.
	stick store-response payload_lv(43,1) if serverhello

	option ssl-hello-chk

	{{range $index, $value := $containers}}
		{{$addrLen := len $value.Addresses}}
		{{if eq $addrLen 1}}
			{{with $address := index $value.Addresses 0}}
				{{if eq $address.Port "443"}}
	server {{$address.IP}}:{{$address.Port}} {{$address.IP}}:{{$address.Port}} check
				{{end}}
			{{end}}
		{{else}}
			{{range $i, $address := $value.Addresses}}
				{{if eq $address.Port "443"}}
	server {{$address.IP}}:{{$address.Port}} {{$address.IP}}:{{$address.Port}} check
				{{end}}
			{{end}}
		{{end}}
	{{end}}
{{end}}


